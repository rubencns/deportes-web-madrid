---
import { courtInitials } from "@constants/common"
import { getStandings } from "@services/standings"
import { formatDate } from "@utils/formatDate"
import { getJerseyColorByColorName } from "@utils/getJerseyColor"
import { isHighestScore } from "@utils/isHighestScore"
import JerseyFilledIcon from "@components/icons/JerseyFilledIcon.astro"
import type { Game } from "@models/Game"

interface Props {
  game: Game
  hideMatchDay?: boolean
  hideCourt?: boolean
}

const { game, hideMatchDay = false, hideCourt = false }: Props = Astro.props

const standings = await getStandings()
const getTeamStandings = (code: string) =>
  standings.find((standing) => standing.Codigo_equipo === code)
---

<article class="game-card">
  <header class="game-card-heading">
    {!hideMatchDay && <p class="game-match-day">Jornada {game.Jornada}</p>}
    <p class="game-date">
      {formatDate(game.Fecha)}
      {game.Hora}
    </p>
    {!hideCourt && <p>{game.Campo.split(courtInitials)[0]}</p>}
  </header>
  <div class="game-card-wrapper">
    <div class="game-card-teams">
      <div
        class={`game-card-team-wrapper${isHighestScore(game.Resultado1, game.Resultado2) ? " highest-score" : ""}`}
      >
        <div class="game-card-team-jersey">
          <JerseyFilledIcon
            color={getJerseyColorByColorName(game.Color_Camiseta_1)}
          />
        </div>
        <p class="team-name">{game.Equipo_local}</p>
        <span class="position-small">
          {` (${getTeamStandings(game.Codigo_equipo1)?.Posicion}ยบ)`}
        </span>
      </div>
      <div
        class={`game-card-team-wrapper${isHighestScore(game.Resultado2, game.Resultado1) ? " highest-score" : ""}`}
      >
        <div class="game-card-team-jersey">
          <JerseyFilledIcon
            color={getJerseyColorByColorName(game.Color_Camiseta_2)}
          />
        </div>
        <p class="team-name">{game.Equipo_visitante}</p>
        <span class="position-small">
          {` (${getTeamStandings(game.Codigo_equipo2)?.Posicion}ยบ)`}
        </span>
      </div>
    </div>
    {
      game.Estado === "F" && (
        <div>
          <p
            class={`game-result game-first-result${isHighestScore(game.Resultado1, game.Resultado2) ? " highest-score" : ""}`}
          >
            {game.Resultado1}
          </p>
          <p
            class={`game-result${isHighestScore(game.Resultado2, game.Resultado1) ? " highest-score" : ""}`}
          >
            {game.Resultado2}
          </p>
        </div>
      )
    }
  </div>
</article>

<style>
  .game-card {
    background: var(--white-color);
    padding: 1rem;
    border-radius: 0.5rem;
    border: 0.0625rem solid var(--primary-light-color);
    box-shadow: 0 0 0.5rem rgba(0, 0, 0, 0.04);

    .game-card-heading {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 1rem;
      font-size: 0.875rem;

      .game-match-day,
      .game-date {
        font-weight: 500;
      }
    }

    .game-card-wrapper {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 1rem;

      .game-card-teams {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;

        .game-card-team-wrapper {
          display: flex;
          align-items: center;
          gap: 0.25rem;
          font-size: 0.9rem;

          .position-small {
            font-size: 0.75rem;
          }

          .team-name {
            text-wrap: nowrap;
          }
        }

        .game-card-team-jersey {
          width: 1rem;
          height: 1rem;
          border-radius: 0.25rem;
          margin-right: 0.15rem;
        }
      }

      .game-result {
        text-align: right;
      }

      .game-first-result {
        margin-bottom: 0.5rem;
      }
    }

    .highest-score {
      font-weight: 600;
    }
  }
</style>
