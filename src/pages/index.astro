---
import Header from "@components/Header.astro"
import Layout from "@layouts/Layout.astro"
import {
  getCurrentMatchDayByGroupCode,
  getGamesByGroupCode,
  getNextMatchDayByGroupCode,
} from "@services/games"
import { groupCode1, groupCode2 } from "src/constants/common"
import { courtInitials } from "@constants/common"
import { isHighestScore } from "@utils/isHighestScore"
import { getStandings } from "@services/standings"

/* const filePath = path.join(process.cwd(), "/mock/clasificaciones_20241025.csv");
const csvToString = await fs.readFile(filePath, "utf-8");
const json = await csv2json(csvToString);
console.log("csv to json", json); */

const gamesOfGroup1 = await getGamesByGroupCode(parseInt(groupCode1))
const gamesOfGroup2 = await getGamesByGroupCode(parseInt(groupCode2))

const currentMatchDayOfGroup1 = await getCurrentMatchDayByGroupCode(
  parseInt(groupCode1)
)
const currentMatchDayOfGroup2 = await getCurrentMatchDayByGroupCode(
  parseInt(groupCode2)
)
const nextMatchDayOfGroup1 = await getNextMatchDayByGroupCode(
  parseInt(groupCode1)
)
const nextMatchDayOfGroup2 = await getNextMatchDayByGroupCode(
  parseInt(groupCode2)
)

const standings = await getStandings()
const getTeamStandings = (code: number) =>
  standings.find((standing) => standing.Codigo_equipo === code)

const currentMatchDayGamesOfGroup1 = gamesOfGroup1
  .filter((game) => game.Jornada === currentMatchDayOfGroup1.Jornada)
  .sort((a, b) => a.Partido - b.Partido)
const currentMatchDayGamesOfGroup2 = gamesOfGroup2
  .filter((game) => game.Jornada === currentMatchDayOfGroup2.Jornada)
  .sort((a, b) => a.Partido - b.Partido)
const nextMatchDayGamesOfGroup1 = gamesOfGroup1
  .filter((game) => game.Jornada === nextMatchDayOfGroup1.Jornada)
  .sort((a, b) => a.Partido - b.Partido)
const nextMatchDayGamesOfGroup2 = gamesOfGroup2
  .filter((game) => game.Jornada === nextMatchDayOfGroup2.Jornada)
  .sort((a, b) => a.Partido - b.Partido)
---

<Layout>
  <main class="main">
    <Header />
    <h2 class="section-title">Últimos resultados</h2>
    <h3 class="group-name">Grupo 1</h3>
    <section class="cards-container">
      {
        currentMatchDayGamesOfGroup1.map((game) => (
          <article class="card">
            <div class="game-result-team">
              <p
                class={`team-name${isHighestScore(game.Resultado1, game.Resultado2) ? " highest-score" : ""}`}
              >
                {game.Equipo_local}
                <span class="position">
                  {` (${getTeamStandings(game.Codigo_equipo1)?.Posicion}º)`}
                </span>
              </p>
              <p
                class={`score${isHighestScore(game.Resultado1, game.Resultado2) ? " highest-score" : ""}`}
              >
                {game.Resultado1}
              </p>
            </div>
            <span class="game-separator">VS</span>
            <div class="game-result-team">
              <p
                class={`score${isHighestScore(game.Resultado2, game.Resultado1) ? " highest-score" : ""}`}
              >
                {game.Resultado2}
              </p>
              <p
                class={`team-name${isHighestScore(game.Resultado2, game.Resultado1) ? " highest-score" : ""}`}
              >
                {game.Equipo_visitante}
                <span class="position">
                  ({getTeamStandings(game.Codigo_equipo2)?.Posicion}º)
                </span>
              </p>
            </div>
          </article>
        ))
      }
    </section>
    <h3 class="group-name">Grupo 2</h3>
    <section class="cards-container">
      {
        currentMatchDayGamesOfGroup2.map((game) => (
          <article class="card">
            <>
              <div class="game-result-team">
                <p
                  class={`team-name${isHighestScore(game.Resultado1, game.Resultado2) ? " highest-score" : ""}`}
                >
                  {game.Equipo_local}
                  <span class="position">
                    {` (${getTeamStandings(game.Codigo_equipo1)?.Posicion}º)`}
                  </span>
                </p>
                <p
                  class={`score${isHighestScore(game.Resultado1, game.Resultado2) ? " highest-score" : ""}`}
                >
                  {game.Resultado1}
                </p>
              </div>
              <span class="game-separator">VS</span>
              <div class="game-result-team">
                <p
                  class={`score${isHighestScore(game.Resultado2, game.Resultado1) ? " highest-score" : ""}`}
                >
                  {game.Resultado2}
                </p>
                <p
                  class={`team-name${isHighestScore(game.Resultado2, game.Resultado1) ? " highest-score" : ""}`}
                >
                  {game.Equipo_visitante}
                  <span class="position">
                    {` (${getTeamStandings(game.Codigo_equipo2)?.Posicion}º)`}
                  </span>
                </p>
              </div>
            </>
          </article>
        ))
      }
    </section>
    <h2 class="section-title">Próximos partidos</h2>
    <h3 class="group-name">Grupo 1</h3>
    <section class="cards-container">
      {
        nextMatchDayGamesOfGroup1.map((game) => (
          <article class="card next-game-card">
            <div class="next-game-teams">
              <p class="next-game-team-name">
                {game.Equipo_local}
                <span class="position">{` (${getTeamStandings(game.Codigo_equipo1)?.Posicion}º)`}</span>
              </p>
              <span class="game-separator">VS</span>
              <p class="next-game-team-name">
                {game.Equipo_visitante}
                <span class="position">{` (${getTeamStandings(game.Codigo_equipo2)?.Posicion}º)`}</span>
              </p>
            </div>
            <div class="next-game-date">
              <p>{game.Fecha}</p>·<p>{game.Hora}</p> -
              <p>{game.Campo.split(courtInitials)[0]}</p>
            </div>
          </article>
        ))
      }
    </section>
    <h3 class="group-name">Grupo 2</h3>
    <secion class="cards-container">
      {
        nextMatchDayGamesOfGroup2.map((game) => (
          <article class="card next-game-card">
            <div class="next-game-teams">
              <p class="next-game-team-name">
                {game.Equipo_local}
                <span class="position">
                  {` (${getTeamStandings(game.Codigo_equipo1)?.Posicion}º)`}
                </span>
              </p>
              <span class="game-separator">VS</span>
              <p class="next-game-team-name">
                {game.Equipo_visitante}
                <span class="position">
                  {` (${getTeamStandings(game.Codigo_equipo2)?.Posicion}º)`}
                </span>
              </p>
            </div>
            <div class="next-game-date">
              <p>{game.Fecha}</p>·<p>{game.Hora}</p> -
              <p>{game.Campo.split(courtInitials)[0]}</p>
            </div>
          </article>
        ))
      }
    </secion>
  </main>
</Layout>

<style>
  .main {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 1rem;
  }

  .cards-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    overflow: auto;
    margin-bottom: 1rem;
    padding: 0.5rem;
    margin-inline: -0.8rem;
  }

  .card {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1.25rem;
    padding: 0.75rem;
    border-radius: 0.5rem;
    border: 0.0625rem solid var(--primary-light-color);
    box-shadow: 0 0 0.5rem rgba(0, 0, 0, 0.04);
    background: var(--white-color);
    height: 4.5rem;
    font-size: 0.875rem;
    text-transform: capitalize;
  }

  .next-game-card {
    display: flex;
    flex-direction: column;
    height: 100%;
    padding-inline: 1.25rem;

    .next-game-teams {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1rem;
      text-align: center;
    }

    .next-game-team-name {
      font-size: 0.95rem;
    }

    .next-game-date {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 0.25rem;
      font-weight: 600;
    }
  }

  .game-result-team {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .score {
    font-size: 1.25rem;
  }

  .team-name {
    text-align: center;
  }

  .highest-score {
    font-weight: 600;
  }

  .score.highest-score {
    color: var(--primary-color);
  }

  .game-separator {
    font-size: 0.75rem;
  }

  .section-title {
    margin-block: 1rem;
  }

  .group-name {
    color: var(--black-color);
    font-size: 1rem;
    margin-bottom: 0.75rem;
  }

  .position {
    font-size: 0.6rem;
  }
</style>
