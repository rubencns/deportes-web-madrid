---
import {
  getStandingsByGroupCode,
  getTeamStandingsByCode,
  getJerseyColorByTeamCode,
  getWinningStreakByTeamCode,
  getStandings,
} from "@services/standings"
import { getTeamGamesByCode, getNextMatchDayByGroupCode } from "@services/games"
import { groupCode1, groupCode2 } from "src/constants/common"
import Layout from "@layouts/Layout.astro"
import Header from "@components/Header.astro"
import { colors } from "@constants/common"
import JerseyFilledIcon from "@components/icons/JerseyFilledIcon.astro"
import ChevronLeftIcon from "@components/icons/ChevronLeftIcon.astro"
import GameCard from "@components/GameCard.astro"

export async function getStaticPaths() {
  const teamsGroup1 = await getStandingsByGroupCode(groupCode1)
  const teamsGroup2 = await getStandingsByGroupCode(groupCode2)
  const teams = [...teamsGroup1, ...teamsGroup2]

  return teams.map((team) => ({
    params: { teamCode: team.Codigo_equipo },
  }))
}

const { teamCode } = Astro.params

const teamStanding = await getTeamStandingsByCode(teamCode)
const teamGames = await getTeamGamesByCode(teamCode)

const nextMatchDayGame = await getNextMatchDayByGroupCode(
  teamStanding?.Codigo_grupo || "0"
)
const nextTeamGame = teamGames.find(
  (game) => game.Jornada === nextMatchDayGame.Jornada
)

const jerseyColors = await getJerseyColorByTeamCode(teamCode)
const hexColorsOfJerseys = jerseyColors.map((jerseyColor) => {
  const color = colors.find((color) =>
    jerseyColor?.trim().toLocaleLowerCase().includes(color.name)
  )

  return color?.hex
})

const groupName =
  teamStanding?.Codigo_grupo.toString() === groupCode1.toString()
    ? "Grupo 1"
    : "Grupo 2"

const winningStreak = await getWinningStreakByTeamCode(teamCode)
---

<Layout>
  <main class="main">
    <Header />
    <div class="section-team-heading">
      <button class="go-back" onclick="history.back()"
        ><ChevronLeftIcon width={20} height={20} /> Volver</button
      >
      <div class="section-team-heading-row">
        <h2 style={{ color: hexColorsOfJerseys[0] }}>
          {teamStanding?.Nombre_equipo}
        </h2>
        {
          hexColorsOfJerseys.map((jerseyColor) => (
            <JerseyFilledIcon color={jerseyColor} />
          ))
        }
      </div>
      <p class="position">{teamStanding?.Posicion}º en {groupName}</p>
      <p class="team-streak">
        Racha de victorias: {winningStreak}
      </p>
    </div>
    <table
      class="standings-table"
      style={{ backgroundColor: hexColorsOfJerseys[0] }}
    >
      <thead>
        <tr>
          <th>PTS</th>
          <th>PJ</th>
          <th>PG</th>
          <th>PE</th>
          <th>PP</th>
          <th>PF</th>
          <th>PC</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>{teamStanding && parseInt(teamStanding?.Puntos)}</td>
          <td>{teamStanding?.Partidos_jugados}</td>
          <td>{teamStanding?.Partidos_ganados}</td>
          <td>{teamStanding?.Partidos_empatados}</td>
          <td>{teamStanding?.Partidos_perdidos}</td>
          <td>{teamStanding?.Goles_favor}</td>
          <td>{teamStanding?.Goles_contra}</td>
        </tr>
      </tbody>
    </table>
    <h3 class="section-title" style={{ color: hexColorsOfJerseys[0] }}>
      Próximo partido
    </h3>
    <section class="next-game-section">
      {
        nextTeamGame ? (
          <GameCard game={nextTeamGame} />
        ) : (
          <p>No hay partido próximo</p>
        )
      }
    </section>
    <h3 class="section-title" style={{ color: hexColorsOfJerseys[0] }}>
      Jornadas
    </h3>
    <section class="game-list">
      {
        teamGames
          .sort((a, b) => parseInt(a.Jornada) - parseInt(b.Jornada))
          .map((game) => <GameCard game={game} />)
      }
    </section>
  </main>
</Layout>

<style>
  .main {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 1rem;
  }

  .section-team-heading {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-top: 1rem;
    margin-bottom: 1.5rem;
  }

  .go-back {
    background: none;
    border: none;
    cursor: pointer;
    align-self: flex-start;
    color: var(--black-color);
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.875rem;
  }

  .section-team-heading-row {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .section-title {
    margin-bottom: 1rem;
  }

  .standings-table {
    background: var(--primary-color);
    margin-inline: -1rem;
    padding-block: 0.5rem;
    color: var(--white-color);
    margin-bottom: 2rem;

    th,
    td {
      text-align: center;
      padding-block: 0.5rem;
    }
  }

  .next-game-section {
    margin-bottom: 2rem;
  }

  .game-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .position {
    font-size: 1rem;
    margin-top: 0.25rem;
  }

  .team-streak {
    margin-top: 0.75rem;
    font-size: 0.9rem;
  }
</style>
